#include <Adafruit_NeoPixel.h> // include the neopixel library

#define PIN 3 // using the blinkytape, data is pin 3

const int numLed = 7; // number of lights
int ledBuffer[numLed];  // which LED are we talking to?
float ledSpeed[numLed]; // how fast is this one fading?
int ledDir[numLed]; // what direction is the LED going?
int ledMax[numLed]; // led max brightness
int ledDeathCount[numLed]; // is the light on or off?

// variables:
int ldrpin=A1; // initialize analog pin 1, connected with photovaristor
int sensorValue = 0;         // the sensor value 1
int sensorMin = 0;        // minimum sensor value 1
int sensorMax = 1023;           // maximum sensor value 1

int ldrpin2=A2; // initialize analog pin 2
int sensorValue2 = 0;         // the sensor value 2
int sensorMin2 = 0;        // minimum sensor value 2
int sensorMax2 = 1023;           // maximum sensor value 2

int ldrpin3=A3; // initialize analog pin 3
int sensorValue3 = 0;         // the sensor value 3
int sensorMin3 = 0;        // minimum sensor value 3
int sensorMax3 = 1023;           // maximum sensor value 3

int ledPin = 3; // the pin the LED data line is connected to
//int val=0; // initialize variable val *Do I need this?

// scale the rgb levels for desired tint
float redVal = 255. / 255.;
float greenVal = 255. / 255.;
float blueVal = 255. / 255.;

// update speed in ms
// higher value is slower sparkle
int speedVar = 1;

// instantiate the library
Adafruit_NeoPixel strip = Adafruit_NeoPixel(numLed, PIN, NEO_GRB + NEO_KHZ800);

void setup() {
  
  Serial.begin(9600);
  
  // turn on LED to signal the start of the calibration period:
  pinMode(13, OUTPUT);
  digitalWrite(13, HIGH); // is digital D13 the built in LED?

  // calibrate during the first five seconds
  while (millis() < 5000) {
    sensorValue = analogRead(ldrpin);
    sensorValue2 = analogRead(ldrpin2);
    sensorValue3 = analogRead(ldrpin3);

 // record the maximum sensor value
  if (sensorValue > sensorMax) {
      sensorMax = sensorValue;
    }
 // record the minimum sensor value
  if (sensorValue < sensorMin) {
      sensorMin = sensorValue;
    }
  if (sensorValue2 > sensorMax2) {
      sensorMax2 = sensorValue2;
    }
 // record the minimum sensor value
  if (sensorValue2 < sensorMin2) {
      sensorMin2 = sensorValue2;
    }
  if (sensorValue3 > sensorMax3) {
      sensorMax3 = sensorValue3;
    }
 // record the minimum sensor value
  if (sensorValue3 < sensorMin3) {
      sensorMin3 = sensorValue3;
    }

 // signal the end of the calibration period
  digitalWrite(13, LOW);
  
  // populate the LED arrays with random speed, max brightness
  // give direction and death meaning
  for (int i = 0; i < numLed; i++) {
    ledSpeed[i] = float(random(5, 75) / 100.);
    ledMax[i] = ledSpeed[i] * 255;
    ledDir[i] = 1;
    ledDeathCount[i] = 0;
  }
  strip.begin(); // init the strip
  strip.show();  // blank the strip
}
} 

void loop() {
   // read the sensor:
  // val=analogRead(ldrpin); From version without calibration 
  
  sensorValue=analogRead(ldrpin);// read the analog value of the sensor and assign it to val
 // Serial.println(sensorValue);// display the value of sensorValue

  // in case the sensor value is outside the range seen during calibration
  sensorValue = constrain(sensorValue, sensorMin, sensorMax);

  // apply the calibration to the sensor reading
  sensorValue = map(sensorValue, sensorMin, sensorMax, 0,500);

  sensorValue2=analogRead(ldrpin2);// read the analog value of the sensor and assign it to val
  sensorValue2 = constrain(sensorValue2, sensorMin2, sensorMax2);
  sensorValue2 = map(sensorValue2, sensorMin2, sensorMax2, 0, 500);
 
  sensorValue3=analogRead(ldrpin3);// read the analog value of the sensor and assign it to val
  sensorValue3 = constrain(sensorValue3, sensorMin3, sensorMax3);
  sensorValue3 = map(sensorValue3, sensorMin3, sensorMax3, 0, 500);
  
  Serial.print("LDR1 "); // The bottom sensor in the paper mache
  Serial.print(sensorValue);// display the value of val (ldr bottom)
  Serial.print("\t");
  Serial.print("LDR2 "); // The middle sensor 
  Serial.print(sensorValue2);// display the value of val2 (ldr middle)
  Serial.print("\t");
  Serial.print("LDR3 "); // The top sensor
  Serial.print(sensorValue3); // display the value of val3 (ldr top) 
  Serial.println();
  
  
  if (sensorValue < 20) {blueVal = 0. / 255., greenVal = 0. / 255.;}
  else {blueVal = 75. / 255., greenVal = 180. / 255., redVal = 255./255. ;}

  if (sensorValue2 > 35) {speedVar = 5;}
  else {speedVar = 1;}

  if (sensorValue3 < 35) { 
    strip.clear();
    // turn indiviual leds on one at a time
  for (int i = 0 ; i < numLed ; i++) {
    strip.setPixelColor(i, 255, 180, 75); // setPixelColor() takes 4 arguments
                                         // the LED you want to write to and the RGB value
    strip.show();
    delay(300);
  }
  }
  
  // upadate the LED values
  for (int i = 0; i < numLed; i++) {
    updateLed(i);
  }

  // write the values to the strip
  for (int i = 0; i < numLed; i++) {
    strip.setPixelColor(i, int(ledBuffer[i] * redVal), int(ledBuffer[i] * greenVal), int(ledBuffer[i] * blueVal));
  }

  strip.show(); // push the values to the strip
  delay(speedVar); // pause
}

void updateLed(int led) {
  // any value in deathCount indicates the LED is dead
  if (ledDeathCount[led] != 0) { // if it's dead
    ledDeathCount[led]++;  // keep dying
    // higher numbers = fewer lights on at a time
    if (ledDeathCount[led] == 120) { // if it has been dead for awhile
      ledDeathCount[led] = 0; // bring it back to life
    }
  } else {
    if (ledBuffer[led] > ledMax[led]) { // if the current value is greater than the max
      ledDir[led] = -1; // start the fade
    }
    if (ledBuffer[led] == 0) { // if the value is 0
      ledDeathCount[led] = 1; // LED is dead
      ledSpeed[led] = float(random(5, 75) / 100.); // give it a new speed
      ledMax[led] = ledSpeed[led] * 255; // a new max value based on the speed
      ledDir[led] = 1; // and reset the direction
    }
    ledBuffer[led] = ledBuffer[led] + ledDir[led] + ledSpeed[led]; // set the value of the LED in the array
  }
}
